#!/bin/sh

# from src/common
_git_branch="bundled-software"
_software_prefix="/Users/Shared/Centra"

_sofin_loader="/Software/Sofin/share/loader"
_configuard_config="config/config.toml"
_profile="${HOME}/.profile"
_check_interval="5" # seconds
_wg_interface="wg0"
_os_name="$(uname)"
_arch="$(uname -m)"

_os_version="$(sw_vers -productVersion)"
_os_minor_release="${_os_version%.*}"
_os_release="${_os_minor_release%.*}"
export PATH="${_software_prefix}/bin:${_software_prefix}/sbin:/usr/local/bin:/usr/bin:/bin:/sbin:/Software/Wireguard-tools/exports"


# don't quit after any failure
set +e

echo
echo "This script will install and configure VPN on your machine."
echo "Checking for XCode Toolsâ€¦"
xcode-select --install

echo
echo "To proceed you'll have to enter the local workstation password (it will not be printed out on the screen during typing)"
echo
echo "Please enter the password for user \"${USER-:noname}\" on the host \"${HOST:-localhost}\":"
sudo uname -a

# input
_yourname="${1}"
_configuard_link="${2}"


_domain="int.centra.systems"
_default_net="198.18"
_dnsmasq_plist="com.centra.dnsmasq.plist"

# software bundle
_current_software_bundle_version="2023-01"
_bundle="bundle-macos${_os_release}-${_arch}-${_current_software_bundle_version}"
_bundle_link="https://software.verknowsys.com/vpn-bundles/${_bundle}.tar.xz"

# override PATH
export PATH="${_software_prefix}/sbin:${_software_prefix}/bin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin"

# show error and quit with given exit code
error () {
    echo "ERROR: ${1}"
    exit "${2:-1}"
}

# fetch prebuilt software bundle per OS architecture
fetch_and_unpack_software_bundle () {
    if [ -f "/tmp/${_bundle_link##*/}" ]; then
        echo "Cleaning previous bundlesâ€¦"
        rm -f "/tmp/${_bundle_link##*/}"
    fi

    echo "Fetching software bundle: ${_bundle_link}â€¦"
    curl -s -o "/tmp/${_bundle_link##*/}" "${_bundle_link}"
    if [ ! -f "/tmp/${_bundle_link##*/}" ]; then
        error "Failed to fetch software bundle: ${_bundle_link}" 5
    fi
    tar -xf "/tmp/${_bundle_link##*/}" --directory "${_software_prefix}/"

    echo "Disabling Quarantine for trusted binariesâ€¦"
    sudo xattr -r -d com.apple.quarantine "${_software_prefix}"
}

# sanity checks
mkdir -p \
    "${_software_prefix}" \
    "${HOME}/Library/LaunchAgents"
if [ -z "${_yourname}" ]; then
    error "No configuard user-name provided (as the first argument). Setup aborted!" 3
fi
if [ -z "${_configuard_link}" ]; then
    error "No configuard address provided (as the second argument). Setup aborted!" 3
fi

fetch_and_unpack_software_bundle
which wg >/dev/null \
    || error "No wg binary found?!" 2
which wg-quick >/dev/null \
    || error "No wg-quick binary found?!" 2
which wireguard-go >/dev/null \
    || error "No wireguard-go binary found?!" 2
which dnsmasq >/dev/null \
    || error "No dnsmasq binary found?!" 2


# main():
echo "Resetting DNSâ€¦"
for _network in $(networksetup -listallnetworkservices | sed -e '/ /d' | grep -E "Wi-Fi|Ethernet"); do
    networksetup -setdnsservers "${_network}" "1.1.1.1"
done

echo "Configuring DNSmasq serviceâ€¦"
mkdir -p "${_software_prefix}/etc/dnsmasq.d"
cat > "/tmp/${_dnsmasq_plist}" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>KeepAlive</key>
        <true/>
        <key>Label</key>
        <string>com.centra.dnsmasq</string>
        <key>LimitLoadToSessionType</key>
        <array>
                <string>Aqua</string>
                <string>Background</string>
                <string>LoginWindow</string>
                <string>StandardIO</string>
                <string>System</string>
        </array>
        <key>ProgramArguments</key>
        <array>
                <string>${_software_prefix}/sbin/dnsmasq</string>
                <string>--keep-in-foreground</string>
                <string>-C</string>
                <string>${_software_prefix}/etc/dnsmasq.conf</string>
                <string>-7</string>
                <string>${_software_prefix}/etc/dnsmasq.d,*.conf</string>
        </array>
        <key>RunAtLoad</key>
        <true/>
</dict>
</plist>
EOF

echo "Configuring DNSmasqâ€¦"
printf "%s\n%s\n%s\n%s\n" \
    "listen-address=127.0.0.1" \
    "server=/${_domain}/${_default_net}.1.1" \
    "server=1.1.1.1" \
    "server=8.8.8.8" \
    > "${_software_prefix}/etc/dnsmasq.conf"

case "${USER}" in
    dmilith)
        printf "%s\n%s\n%s\n" \
            "server=/*.home/192.168.0.34" \
            "server=/verknowsys.com/192.168.0.34" \
            "server=/*.verknowsys.com/192.168.0.34" \
            > "${_software_prefix}/etc/dnsmasq.d/verknowsys-home.conf"
        ;;

    *)
        ;;
esac


echo "Launching DNSmasq serviceâ€¦"
(
    sudo launchctl unload -w "/Library/LaunchDaemons/${_dnsmasq_plist}" 2>/dev/null;
    sudo install -o 0 -g 0 \
        "/tmp/${_dnsmasq_plist}" \
        "/Library/LaunchDaemons/${_dnsmasq_plist}";
    sudo launchctl load -w "/Library/LaunchDaemons/${_dnsmasq_plist}";
)

sleep 5

dig +short google.com @127.0.0.1 >/dev/null
if [ "0" != "${?}" ]; then
    error "DNSmasq DNS validation query has failed!" 6
fi
for _network in $(networksetup -listallnetworkservices | sed -e '/ /d' | grep -E "Wi-Fi|Ethernet"); do
    networksetup -setdnsservers "${_network}" "127.0.0.1"
done

echo "Fetching Wireguard configurationâ€¦"
curl -s -XPOST "${_configuard_link}/${_yourname}" > "${_software_prefix}/etc/wireguard/wg0.conf"

echo "Installing Configuardâ€¦"
if [ "local" = "${3}" ]; then
    (
        cp "config/config.toml.${_os_name}" "config/config.toml";
        sed -i '' -e "/uuid/d; /main_net/d; /server/d; s|PREFIX|${_software_prefix}|g;" "config/config.toml";
        echo "main_net = \"${_default_net}\"" >> "config/config.toml";
        bin/uninstall;
        bin/install;
    )
else
    (
        cd /tmp;
        rm -f "${_git_branch}";
        curl -s -O "https://codeload.github.com/VerKnowSys/configuard/tar.gz/${_git_branch}";
        tar xf "${_git_branch}";
        cd "/tmp/configuard-${_git_branch}";
        cp "config/config.toml.${_os_name}" "config/config.toml";
        sed -i '' -e "/uuid/d; /main_net/d; /server/d; s|PREFIX|${_software_prefix}|g;" "config/config.toml";
        echo "main_net = \"${_default_net}\"" >> "config/config.toml";
        bin/uninstall;
        bin/install;
        rm -rf "/tmp/configuard-${_git_branch}" "/tmp/${_git_branch}";
    )
fi

_validation_ip="$(dig +short "${_domain}" 2>/dev/null)"
if [ "${_validation_ip}" != "${_default_net}.1.1" ]; then
    error "Domain: ${_domain} should resolve to: ${_default_net}.1.1!"
fi

echo "VPN setup is now validated and complete! ðŸŽ‰"
