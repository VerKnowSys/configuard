#!/bin/sh

set +e

_arch="$(uname -m)"
case "${_arch}" in
    arm64)
        _prefix="/opt/homebrew"
        ;;

    x86_64)
        _prefix="/usr/local"
        ;;
esac

mkdir -p "${HOME}/Library/LaunchAgents"
export PATH="${_prefix}/bin:/bin:/usr/bin:/sbin:/usr/sbin"

if [ -z "${1}" ]; then
    echo "Please specify your unique name as first argument (only alpha-numeric, numbers and - .)!"
    exit 1
fi
_default_net="198.18"
_yourname="${1}"
_domain="$(pass ops/wireguard/domain 2>/dev/null)"

echo "PATH: ${PATH}"
echo "PREFIX: ${_prefix}"
echo "ARCH: ${_arch}"
echo "USER: ${_yourname}"
echo "DOMAIN: ${_domain}"

_dnsmasq_domain="${2:-${_domain}}"
if [ -z "${_dnsmasq_domain}" ]; then
    echo "No internal domain provided or available through vault."
    exit 1
fi
_configuard_link="${3}"
echo "Internal network domain is: ${_dnsmasq_domain}"

if [ -f "/Library/LaunchAgents/com.centra.dns-auto-set.plist" ]; then
    echo "Uninstalling dns-auto-set"
    sudo launchctl unload -w "/Library/LaunchAgents/com.centra.dns-auto-set.plist" >/dev/null 2>&1
fi
sudo rm -f "${_prefix}/bin/dns-auto-conf" "/Library/LaunchAgents/com.centra.dns-auto-set.plist" >/dev/null 2>&1

for _network in $(networksetup -listallnetworkservices | sed -e '/ /d' | grep -E "Wi-Fi|Ethernet"); do
    networksetup -setdnsservers "${_network}" "1.1.1.1"
done

if [ -z "${_configuard_link}" ]; then
    _address="$(pass ops/wireguard/address)"
    _uuid="$(pass ops/wireguard/uuid)"
    if [ -z "${_address}" ] \
    || [ -z "${_uuid}" ]; then
        echo "No wireguard values available from pass vault!"
        echo "If you wish to continue, please ask your DevOps about direct link to Configuard"
    else
        _configuard_link="https://${_address}/${_uuid}/wireguard/workstation"
    fi

    if [ -z "${_configuard_link}" ]; then
        echo "Couldn't determine configuard link. Setup aborted!"
        exit 3
    fi
fi

echo "Making sure ${_prefix} is owned by local user…"
sudo chown -R ${USER} ${_prefix} >/dev/null 2>&1

echo "Making sure brew requirements are installed…"
which brew >/dev/null || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
which wg >/dev/null || ${_prefix}/bin/brew install wireguard-tools
which dnsmasq >/dev/null || ${_prefix}/bin/brew install dnsmasq

echo "Setting up local DNSmasq"
sudo brew services start dnsmasq >/dev/null
printf "%s\n%s\n%s\n%s\n" \
    "listen-address=127.0.0.1" \
    "server=/${_dnsmasq_domain}/${_default_net}.1.1" \
    "server=1.1.1.1" \
    "server=8.8.8.8" \
    > ${_prefix}/etc/dnsmasq.conf
sudo brew services restart dnsmasq
for _network in $(networksetup -listallnetworkservices | sed -e '/ /d' | grep -E "Wi-Fi|Ethernet"); do
    networksetup -setdnsservers "${_network}" "127.0.0.1"
done

echo "Proceeding with installation (you may be promped for your local user password)…"
mkdir -p ${_prefix}/etc/wireguard
curl -XPOST "${_configuard_link}/${_yourname}" > /tmp/configuard-wg0.conf
mv -v /tmp/configuard-wg0.conf ${_prefix}/etc/wireguard/wg0.conf

echo "Installing Configuard"
cd /tmp
rm -f master
curl -s -O "https://codeload.github.com/VerKnowSys/configuard/tar.gz/master"
tar xf master
cd /tmp/configuard-master
cp "config/config.toml.$(uname)" "config/config.toml"
sed -i '' -e "/uuid/d; /main_net/d; /server/d; s|PREFIX|${_prefix}|g;" "config/config.toml"
echo "main_net = \"${_default_net}\"" >> "config/config.toml"
bin/uninstall
bin/install
cd ~
rm -rf /tmp/configuard-master /tmp/master
